#pragma once
#include <iostream>

// Each node in a doubly linked list

class DequeEmptyException;
template <class T> class Node;
template <class T> class deque_iterator;
template<class T>
class deque
{
	
	public:
		typedef deque_iterator<T> iterator;
		deque();
		deque(int capacity);
		deque(int capacity,T default_value);
		deque(const deque<T> & deque);
		deque(T* a);
		~deque();
		
		void push_front(const T & x);//ссылка на константное значение
	    void pop_front();
        void push_back(const T & x);
        void pop_back();
		
		//ELEMENT ACCESS////
        T & front () const;//внутри себя ничего не изменяет
		T & back() const;
		T & at(int i) const;
		T & operator [](int i) const;
		void assign(int capacity,T default_value);
		void print_deque();
        unsigned int size() const;
		bool empty() const;
		void clear();
		iterator begin() const;
        iterator end() const;
    private:
		 Node<T>* head;
		 Node<T>*  tail;
	     int size_of_deque;
		 void init_deque();
    
};
template <class T>
deque<T>::deque()
{
	init_deque();
}
template <class T>
deque<T>::deque(int capacity)
{
	init_deque();
	for (int index=0; index<capacity;index++)
	{
		Node<T>* new_node = new Node<T>(NULL);	
		push_back(new_node);
    }
}

template <class T>
deque<T>::deque(int capacity,T default_value)
{
	assign(capacity,default_value);
	
}
template <class T>
deque<T>::deque(const deque & dek)
{
	init_deque();
	for (Node<T> * current = dek.head; current != NULL; current = current ->next_node)
		push_back(current -> data);
}
template <class T>
void deque<T>::assign(int capacity,T default_value)
{
    init_deque();
	for (int index=0; index<capacity;index++)
	{
		Node<T>* new_node = new Node<T>(default_value);	
		push_back(new_node->data);
    }  
}
template <class T>
deque <T>::~deque()
{
	clear();
}
template <class T>
T & deque<T>::operator [](int i) const
    {
        if(empty())
			throw new DequeEmptyException("deque is empty");
        else
            return at(i);  
    }
template <class T>
void deque<T>::push_back(const T & value)
{
	// Create a new node
			Node<T>* new_node = new Node<T>(value);	
			if (empty())
				head = tail = new_node;
            else
            {
				new_node->prev_node = tail;
				tail->next_node = new_node;    
				tail = new_node;
            }
			size_of_deque++;
}
template <class T>
void deque<T>::init_deque()
{
	head=NULL;
    tail=NULL;
	size_of_deque=NULL;
}
template <class T>
void deque<T>::push_front(const T&  value)
{
	// Create a new node
			Node<T>* new_node = new Node<T>(value);
			

			if ( empty() ) {
				 // Add the first element
				head = tail = new_node;
			 }
			else {
            // Prepend to the list and fix links
            new_node->next_node = head;
            head->prev_node = new_node;
            head = new_node;
			}

			size_of_deque++;
}
template <class T>
void deque<T>::pop_front() 
{
	if ( empty() ) {
            throw new DequeEmptyException("deque is empty");
		}

			// Delete the head node and fix the links
			Node<T>* tmp = head;
			if ( head->next_node != NULL )
			{
				head = head->next_node;
				head->prev_node = NULL;
			}
			else
			{
				head = NULL;
			}
			size_of_deque--;
			delete tmp;

}
template <class T>
void deque<T>::pop_back()
{
	if ( empty() ) {
            throw  DequeEmptyException("deque is empty");
			}


			// Delete the head node and fix the links
			Node<T>* new_node = tail;
			if ( tail->prev_node != NULL )
		    {
				 tail = tail->prev_node;
				 tail->next_node = NULL;
            }
			else
			{
			   tail = NULL;
			}
            size_of_deque--;
		    delete new_node;

}
template <class T>
unsigned int deque<T>::size() const
{
	return size_of_deque;
}
template <class T>
bool deque<T>::empty() const
{
	return tail==NULL||head == NULL;
}
template <class T>
void deque<T>::clear() 
{
	Node <T> * first = head;
    while (first != 0)
    {
    Node <T> * next = first->next_node;
        delete first;
    first = next;
    }
}
template <class T>
T & deque<T>::front() const
{
	if ( empty() )
				throw  DequeEmptyException("Deque is empty");
	return head->data;
}
template <class T>
T & deque<T>::back() const
{
	if ( empty() )
				throw  DequeEmptyException("Deque is empty");
	return tail->data;
}
template <class T>
T & deque<T>::at(int i) const
{
	iterator itr=begin();
	unsigned int current_index=0;
	while (current_index++!=i) {
	     ++itr;
    }
	return *itr;
	
}
template <class T>
typename deque<T>::iterator deque<T>::begin() const
{
        return iterator(head);
}
template <class T>
typename deque<T>::iterator deque<T>::end() const
{
        return iterator(tail);
}
/////CLASSES/////////////

class DequeEmptyException : public std::exception
{
  public :
	DequeEmptyException():std::exception() {};
	DequeEmptyException(std::string message):std::exception(message.c_str()){}
 ;
};
template <class T> 
class Node 
{
private:
   Node(const T & x): data(x), next_node(0), prev_node(0) {}

   T data;     
   Node<T> * next_node;
   Node<T> * prev_node;

   friend class deque<T>;
   friend class deque_iterator<T>;
};
template <class T> class deque_iterator
{
public:
   typedef deque_iterator<T> iterator;

   deque_iterator(Node<T> * source_link): current_node(source_link) { }
   deque_iterator(): current_link(0) { }
   deque_iterator(deque_iterator<T> * source_iterator): current_node(source_iterator.current_node) { }

   T & operator*();  // оператор разыменования
   iterator & operator=(const iterator & rhs);
   bool operator==(const iterator & rhs) const;
   bool operator!=(const iterator & rhs) const;
   iterator & operator++(); 
   iterator operator++(int);
   iterator & operator--(); 
   iterator operator--(int); 

protected:
   Node<T> * current_node;

   friend class deque<T>;
};

template <class T>
T & deque_iterator<T>::operator*()
{
	return current_node -> data;
}

template <class T>
deque_iterator<T> & deque_iterator<T>::operator++()
{
        current_node = current_node -> next_node;
        return *this;
}
template<class T>
bool deque_iterator<T>::operator==(const iterator & rhs) const
{
    return ( this->current_node == rhs.current_node ); 
}

template <class T>
bool deque_iterator<T>::operator!=(const iterator & rhs) const
{
    return !( *this == rhs );
}