#pragma once
#include <iostream>
#include "afxwin.h"
#include <stdexcept>
// Each node in a doubly linked list

class DequeEmptyException;
template <class T> class Node;
template <class T> class deque_iterator;
template <class T> class deque_reverse_iterator;
template<class T>
class deque
{
	
	public:
		typedef deque_iterator<T> iterator;
		typedef deque_reverse_iterator<T> reverse_iterator;
		deque();
		deque(int capacity);
		deque(int capacity,T default_value);
		deque(const deque<T> & deque);
		deque(T* a,int capacity);
		~deque();
		
		void push_front(const T & x);//ссылка на константное значение
	    void pop_front();
        void push_back(const T & x);
        void pop_back();
		
		//ELEMENT ACCESS////
        T & front () const;//внутри себя ничего не изменяет
		T & back() const;
		T & at(int i) const;
		T & operator [](int i) const;
		void assign(int capacity,T default_value);
        unsigned int size() const;
		bool empty() const;
		void clear();
		void reverse();
		void insert(iterator pos, const T & x);
        void erase(iterator & pos); 
		iterator begin() const;
        iterator end() const;
		reverse_iterator rbegin() const;
		reverse_iterator rend() const;
		int compare(T x,T y);
    private:
		 Node<T>* head;
		 Node<T>* tail;
	     int size_of_deque;
		 void init_deque();
		 void init_nodes(int capacity,T* a,T default_value,bool is_value_null);
    
};
template <class T>
void deque<T>::init_deque()
{
	head=NULL;
    tail=NULL;
	size_of_deque=NULL;
}
template <class T>
void deque<T>::init_nodes(int capacity,T* a,T default_value,bool is_value_null)
{
	init_deque();
	T data;
	bool isArray=false;

	if (a==NULL)
		data=is_value_null?NULL:default_value;
	else
	   isArray=true;

	for (int index=0; index<capacity;index++)
	{
		if (isArray)
			push_back(*(a + index));
		else push_back(data);
    }
	ASSERT(size_of_deque==capacity);
	ASSERT(head);
	ASSERT(tail);
}
template <class T>
deque<T>::deque()
{
	init_deque();
}
template <class T>
deque<T>::deque(T* a,int capacity)
{ 
	init_nodes(capacity,a,NULL,true);
}

template <class T>
deque<T>::deque(int capacity)
{
	init_nodes(capacity,NULL,NULL,true);
}
template <class T>
void deque<T>::assign(int capacity,T default_value)
{
	init_nodes(capacity,NULL,default_value,false);
      
}
template <class T>
deque<T>::deque(int capacity,T default_value)
{
	assign(capacity,default_value);
	
}
template <class T>
deque<T>::deque(const deque & dek)
{
	init_deque();
	ASSERT(!dek.empty());
	for (Node<T> * current = dek.head; current != NULL; current = current ->next_node)
		push_back(current -> data);
	ASSERT(size_of_deque==dek.size());
	ASSERT(head);
	ASSERT(tail);
}


template <class T>
deque <T>::~deque()
{
	clear();
}
template <class T>
 T & deque<T>::operator [](int i) const
{
    if(empty())
	   throw new DequeEmptyException("deque is empty");
    else
       return at(i);  
}
template <class T>
T & deque<T>::at(int i) const
{
	if(i<size_of_deque)
	{ 
		iterator itr=begin();
		for(int current_index=0;current_index!=i;current_index++)
		   ++itr;
		return *itr;
	}
	else 
		throw std::invalid_argument("Invalid index");
	 
}
template <class T>
void deque<T>::push_back(const T & value)
{
	// Create a new node
	Node<T>* new_node = new Node<T>(value);	
	if (empty())
		head = tail = new_node;
    else
    {
		new_node->insertAfter(tail); 
		ASSERT(new_node->prev_node==tail);
		tail = new_node;
     }
	 size_of_deque++;
}

template <class T>
void deque<T>::push_front(const T&  value)
{
	// Create a new node
	Node<T>* new_node = new Node<T>(value);
	if ( empty() ) 
	{
	 // Add the first element
		head = tail = new_node;
	}
	else 
	{
      // Prepend to the list and fix links
	  new_node->insertBefore(head);
	  ASSERT(new_node->next_node==head);
      head = new_node;
	}
    size_of_deque++;
}
template <class T>
void deque<T>::pop_front() 
{
	if (empty()) 
            throw new DequeEmptyException("deque is empty");
    // Delete the head node and fix the links
	if ( head->next_node != NULL )
	{
		head = head->next_node;
		head->prev_node = NULL;
	}
	else
		head = NULL;

	size_of_deque--;

}
template <class T>
void deque<T>::pop_back()
{
	if (empty()) 
       throw  DequeEmptyException("deque is empty");
	// Delete the head node and fix the links
	if ( tail->prev_node != NULL )
	{
		tail = tail->prev_node;
		tail->next_node = NULL;
    }
	else
		 tail = NULL;
            
	size_of_deque--;

}
template <class T>
unsigned int deque<T>::size() const
{
	return size_of_deque;
}
template <class T>
bool deque<T>::empty() const
{
	return tail==NULL||head == NULL;
}
template <class T>
void deque<T>::reverse() 
{
	if(empty())
		throw new DequeEmptyException("deque is empty");
	Node<T> * current =head; 
	Node<T> * prev = NULL;
    Node<T> * next = NULL;
	while(current)
    {
		next = current->next_node;
		current->prev_node = next;
		current->next_node = prev;
        prev = current;
        current = next;
    }
    head=prev;
	delete current,prev,next;
		
}

template <class T>
void deque<T>::clear() 
{
	Node <T> * first = head;
	while (first)
    {
        Node <T> * next = first->next_node;
        delete first;
    first = next;
    }
	//init_deque();
}
template <class T>
T & deque<T>::front() const
{
	if (empty())
		throw  DequeEmptyException("Deque is empty");
	ASSERT(head);
	return head->data;
}
template <class T>
T & deque<T>::back() const
{
	if (empty())
		throw  DequeEmptyException("Deque is empty");
	ASSERT(tail);
	return tail->data;
}

template <>
int deque<int>::compare(int x,int y)
{
	//return x>y?1:(x<y?-1:0);
	if(x>y)return 1;
	if(x<y)return -1;
	return 0;
	
}
template <>
int deque<std::string>::compare(std::string x,std::string y)
{
	return x.compare(y);
}

template <class T>
typename deque<T>::iterator deque<T>::begin() const
{
        return iterator(head);
}
template <class T>
typename deque<T>::iterator deque<T>::end() const
{
        return iterator(tail);
}
template <class T>
typename deque<T>::reverse_iterator deque<T>::rbegin() const
{
        return reverse_iterator(tail);
}
template <class T>
typename deque<T>::reverse_iterator deque<T>::rend() const
{
        return reverse_iterator(head);
}
/////CLASSES/////////////
class DequeEmptyException : public std::exception
{
  public :
	DequeEmptyException():std::exception() {};
	DequeEmptyException(std::string message):std::exception(message.c_str()){}
 ;
};
template <class T> 
class Node 
{
private:
   Node(const T & x): data(x), next_node(0), prev_node(0) {}

   T data;     
   Node<T> * next_node;
   Node<T> * prev_node;
   void insertAfter(Node<T> * node)
   {
	    prev_node = node;
		node->next_node = this;    
		
   }
   void insertBefore(Node<T> * node)
   {
	  next_node = node;
      node->prev_node = this;  
   }
   
   friend class deque<T>;
   friend class deque_iterator<T>;
};
template <class T> class deque_iterator
{
public:
   typedef deque_iterator<T> iterator;

   deque_iterator(Node<T> * source_link): current_node(source_link) { }
   deque_iterator(): current_node(0) { }
   deque_iterator(deque_iterator<T> * source_iterator): current_node(source_iterator.current_node) { }

   T & operator*(); 
   iterator & operator=(const iterator & rhs);
   bool operator==(const iterator & rhs) const;
   bool operator!=(const iterator & rhs) const;
   virtual iterator & operator++()
   {
	    current_node = current_node -> next_node;
        return *this;
   } 
   iterator operator++(int);
   virtual iterator & operator--()
   {
	   current_node = current_node -> prev_node;
	   return *this;
   }  
   iterator operator--(int); 

protected:
   Node<T> * current_node;
   friend class deque<T>;
};

template <class T> 
class deque_reverse_iterator:public deque_iterator<T>
{
public:
   typedef deque_reverse_iterator<T> reverse_iterator;
   virtual reverse_iterator & operator++()
   {
	    current_node = current_node ->prev_node;
        return *this;
   } 
   virtual reverse_iterator & operator--()
   {
	   current_node = current_node ->next_node;
	   return *this;
   }  
};

////////////////////////////////////
template <class T>
T  & deque_iterator<T>::operator*() 
{
	ASSERT(current_node);
	return current_node -> data;
}
template<class T>
bool deque_iterator<T>::operator==(const iterator & rhs) const
{
    return ( this->current_node == rhs.current_node ); 
}
template <class T>
bool deque_iterator<T>::operator!=(const iterator & rhs) const
{
    return !( *this == rhs );
}